name: Running Job (Docker Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
#We need to also change the environment variables in Dockerfile to connect to MongoDB database!
#We build a container image for this application to start web server and run the web server in that isolated environment
#based on some node image that was built from Docker File (that we need to put environment variables here)
#This Docker File enables us to run containers based on the definition. THerefore, it is necessary to create  Dockerfile in repo!
#We run this test job on a Docker Container. We add container in a job defintion.
#We put all steps into a container by using some basic image, base environment to see how it works.
#We need to specify the name of the image that will be used. 
#All Docker Containers are based on some image
#It runs on the ubuntu machine, but it will just host the image, but these steps do not have access to these tools & machines
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
#A job is running in a container
    container: 
      image: node:18
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CLUSTER_ADDRESS: cluster0.6ukh6mx.mongodb.net
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"

#On the GitHub Actions in this workflow, you can see a step -> Initialize Containers 
#In a test job, in this Initialize Containers step you have a lot of information related to this container/image
#It performs all all steps that were executed inside of this container
#We technically run all these steps in different environments.
#It is helpful if you need full control over the environment where you run your jobs.
#Container -> env. -> Container might need also environment variables
#This information comes from official image documentation (env), but for this image it is not needed
#Finally, we have put a job and its steps into a container.
#If we remove network access in MongoDB (ALLOW ACCESS FROM ANYWHERE), this workflow will not run